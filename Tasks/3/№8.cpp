#include <iostream>
using namespace std;

struct Node                      //Структура с инфополями и адресным полем
{
	int val;                             //Инфополе. значения из x будут передаваться в список
	Node* nodes;                    //Адресное поле
};

class List                          //Класс Список
{
	Node* Head;                     //Указатель на последний активный элемент или просто голова списка
public:
	List() { Head = NULL; }             //Конструктор и инициализация указателя пустым значением
	~List();                           //Прототип деструктора. Сам деструктор вынесен за класс
	void Add(int x);                   //Прототип функции добавления значений в список
	void Show();                       //Прототип функцииотображения списка на экране
};

List::~List()                       //Деструктор вынесен за класс
{
	while (Head != NULL)            //Пока по адресу не пусто
	{
		Node* temp = Head->nodes; //Временная переменная для хранения адреса следующего элемента
		delete Head;                //Освобождаем адрес обозначающий начало
		Head = temp;                //Меняем адрес на следующий
	}
}

void List::Add(int val)               //Функция добавления элементов в список
{
	Node* temp = new Node;       //При каждом вызове выделяется память
	temp->val = val;                        //Записываем x в элемент структуры  element (в x структуры element)
	temp->nodes = Head;                  //Указываем, что след. элемент это объект по адресу Head
	Head = temp;                        //Указываем, что последний активный элемент это только что введенный
}

void List::Show()                   //Функция отображения списка на экране
{
	Node* temp = Head;                //Определяем указатель, который изначально он равен адресу начала списка

	while (temp != NULL)               //До тех пор пока не встретит пустое значение
	{
		cout << temp->val << " ";           //Выведет элемент x из списка
		temp = temp->nodes;                //Указываем, что далее нам нужен следующий элемент
	}
}

int main()
{

	int N;                        //Число элементов в список
	int val;                        //Элементы вводимые в список
	List lst;                     //Переменная, тип которой список

	cout << "N = ";
	cin >> N;     //Указали сколько элементов вводить в список

	val = N;

	for (int i = 0; i < N; i++)
	{
		             //Ввод x с клавиатуры
		lst.Add(val);           //Добавление элемента в список
	}

	lst.Show(); 				//Вывод списка на экран		
	return 0;
}