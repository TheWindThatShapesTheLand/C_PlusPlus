#include"Head.h"
#include<iostream>
#include <utility>
#include <fstream>
using namespace std;

int main()
{	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//память для A
	
	for (int i = 0; i < n; i++)
	{
		A[i] = new double[m];
	}

	for (int i = 0; i < n; i++)
	{
		oldA[i] = new double[n];
	}

	for (int i = 0; i < n; i++)
	{
		X[i] = new double[1];
	}

	for (int i = 0; i < n; i++)
	{
		O[i] = new double[1];
	}

	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//заполняем матрицу

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (j <= n)
			{
				if (j == i && j != n)
				{
					A[i][j] = (N + i + 1) / 100;
					oldA[i][j] = (N + i + 1) / 100;

				}
				else if ((j + 1 == i || i + 1 == j) && j != n)
				{
					A[i][j] = a;
					oldA[i][j] = a;
				}

				else if ((j + 2 == i || i + 2 == j) && j != n)
				{
					A[i][j] = b;
					oldA[i][j] = b;
				}

				else if ((j + 3 == i || i + 3 == j) && j != n)
				{
					A[i][j] = c;
					oldA[i][j] = c;
				}
				else if (j == n)
				{
					A[i][j] = i + 1;

				}

				else
				{
					A[i][j] = 0;
					oldA[i][j] = 0;

				}
			}
			else
			{
				if (i + n + 1 == j)
				{
					A[i][j] = 1;
				}

				else
				{
					A[i][j] = 0;
				}
			}
		}
	}


	ofstream p;
	p.open("Матрица А.txt");

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			p << A[i][j] << " ";
			

		}
		p << endl;

	}
	p.close();

	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//норма А

	for (int i = 0; i < n; ++i) 
	{
		for (int j = 0; j < n; ++j) 
		{
			t+= abs(A[i][j]);
			A1[i] = abs(t);
		}
		t = 0;
	}
	t = 0;

	double maxA1 = A1[0];

	for (int i = 0; i < n; i++) 
	{
		if (A1[i] > maxA1)
		{
			maxA1 = A1[i];
		}
	}



	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//меняем строки

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (A[i][0] == 0)
			{
				
				if (A[i][j] != 0)
				{
					break;
				}

				k++;
		
			}
			
		}


		if (k > 0)
		{
			swap(A[i], A[k]);
			k = 0;
		}
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//подсчёт нулей

	for (int i = 0; i < n-1; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (A[i][0] == 0 && A[i + 1][0] != 0)
			{
				if (A[i][j] != 0)
				{
					break;
				}

				k++;
			}
		}
	}
	

	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//приводим к нижней треугольной


	while (k + 1 < n)
	{
		for (int i = 0; i <= k+1; i++)
		{
			for (int j = 0; j < m; j++)
			{
				if (i < k + 1)
				{
					if (i == j && A[i][j] != 0)
					{
						v = A[i][j];

						if (det == 0)
						{
							Det[i] = v;

						}
					}
					A[i][j] = A[i][j] / v;

					Mult[r] = A[i][j] * A[k + 1][i];

					Dif[r] = A[k + 1][j] - Mult[r];
					r++;
				}
				else if (i == k + 1)
				{
					if (i == j)
					{
						v = A[i][i];
						Det[i] = v;
					}

					A[i][j] = A[i][j] / v;
					r = 0;
				}
			}
			if (i < k + 1)
			{
				swap(A[k + 1], Dif);
				r = 0;
			}

			else if (i == k + 1)
			{
				k++;
				det++;
				break;

			}
		}

	}
	r = 0;
	v = 0;
	k = 0;
	
	

	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//приводим к верхней тругольной

	while(k <n-1)
	{
		for (int i = n -1-k; i > 0; i--)
		{
			for (int j = 0; j < m; j++)
			{
				Mult[r] = A[i+k][j] * A[i - 1][i+k];
				Dif[r] = A[i - 1][j] - Mult[r];

				r++;

			}

			swap(A[i - 1], Dif);
			r = 0;
		}
		k++;
		r = 0;
	}

	delete[] Dif;
	delete[] Mult;

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//норма обратной А

	for (int i = 0; i < n; ++i)
	{
		for (int j = n+1; j < m; ++j)
		{
			t += abs(A[i][j]);
			A2[i] = abs(t);
		}
		t = 0;
	}

	double maxA2 = A2[0];

	for (int i = 0; i < n; i++)
	{
		if (A2[i] > maxA2)
		{
			maxA2 = A2[i];
		}
	}

	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//число обусловленности
	M = maxA1 *maxA2;

	delete[] A1;
	delete[] A2;
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//определитель

	for (int i = 0; i < n; i++)
	{
		DetA = DetA * Det[i];
	}
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	for (int i = 0; i < n; i++)
	{
		newA[i] = new double[n];
	}

	for (int i = 0; i < n; i++)
	{
		E[i] = new double[n];
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//вывод  всего
	

	setlocale(LC_ALL, "Russian");
	ofstream f;

	f.open("Решение СЛАУ.txt");

	f << "Определитель Матрицы А = " << DetA << endl;

	f << endl << "Число Обусловленности М = " << M << endl;

	f << endl << "Корни СЛАУ:" << endl;

	for (int i = 0; i < n; i++)
	{
		for (int j = n; j < n+1; j++)
		{
			f << "X" << i+1 << "= " << A[i][j] << endl;
			
			X[i][1] = A[i][j];
		}
		
	}
	
	f << endl << "Элементы обратной Матрицы А:" << endl;

	for (int i = 0; i < n; i++)
	{
		for (int j = n+1; j < m; j++)
		{
			f  <<"a"<< i+1<<"."<< j-n<<"= "<< A[i][j] << "\t";

			newA[i][j-n-1] = A[i][j];

		}
		f << endl;
		
	}

	f.close();
	

	ofstream g;
	g.open("Проверка матриц.txt");

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			E[i][j] = 0;
			for (int k = 0; k < n; k++)
			{
				E[i][j] += newA[i][k] * oldA[k][j];
				
			}
			if (E[i][j] < 0.0001)
			{
				E[i][j] = 0;
			}
			g << E[i][j] << "\t";
		}
		g << endl;
	}

	g.close();

	ofstream h;
	h.open("Проверка решения.txt");

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < 1; j++)
		{
			O[i][1] = 0;
			for (int k = 0; k < n; k++)
			{
				O[i][1] += oldA[i][k] * X[k][1];
				
			}

			if (O[i][1] <= pow(10, -8))
			{
				O[i][1] = 0;
			}
			h << O[i][1] << "\t";
		}
		
		h << endl;
	}
	h.close();

	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//удаляем массивы
	
	for(int i = 0; i < n; i++)
	{
		delete[] A[i];
	}
	delete[] A;
	
	for (int i = 0; i < n; i++)
	{
		delete[] newA[i];
	}
	delete[] newA;
	
	delete[] oldA;
	
	for (int i = 0; i < n; i++)
	{
		delete[] E[i];
	}
	delete[] E;
	
	delete[] X;

	delete[] O;

	delete[] Det;
	
	
	return 0;
}