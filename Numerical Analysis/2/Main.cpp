#include"Header.h"
#include<iostream>
#include <utility>
#include <ctime>
#include <fstream>

using namespace std;

int main()
{
	
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//память для A+заполняемХ0

	for (int i = 0; i < m; i++)
	{
		A[i] = new double[n];
		X[i] = 0;
		X1[i] = 0;
		Y[i] = new double[1];
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//заполняем матрицу

	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (j != n - 1)
			{
				if (i == j)
				{
					A[i][j] = m * c;
					k = 1;
				}

				else if (j < i)
				{
					A[i][j] = m + k - 1 - i;
					k++;
				}

				else if (j > i)
				{
					A[i][j] = m - k;
					k++;
				}
			}

			else if (j == n - 1)
			{
				A[i][j] = c * (i + 1);
			}
		}
		k = 1;

	}
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//метод якоби
	clock_t t;
	do
	{
		for (int i = 0; i < m; i++)
		{

			for (int j = 0; j < n; j++)
			{
				if (i == j)
				{
					continue;
				}
				else if (j != n - 1)
				{
					X1[i] =  (-1*A[i][j] * X[j])+X1[i];
					
				}

				if (j == n - 1)
				{
					X1[i] = ((A[i][j]+X1[i])/A[i][i]);
					
				}
			}
			DiffX[i] = X1[i] - X[i];
		}
		Max = fabs(DiffX[0]);

		for (int i = 1; i < m; i++)
		{
			if (fabs(DiffX[i]) > Max)
			{
				Max = fabs(DiffX[i]);
			}
			
		}

		swap(X, X1);
		for (int i = 0; i < m; i++)
		{
			X1[i] = 0;

		}
		
	} while (Max > pow(10,-8));	

	t = clock();

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//выводим решения

	setlocale(LC_ALL, "Russian");
	ofstream f;

	f.open("C:\\Users\\Компудахтер\\Desktop\\Решение методом Якоби.txt");

	for (int i = 0; i < m; i++)
	{
		f << "x[" << i+1 << "]=" << X[i] << endl;;
	}
	
	f << endl << "Runtime was:" << float(t) / CLOCKS_PER_SEC << "sec.";

	f.close();
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//проверка
	ofstream h;
	h.open("C:\\Users\\Компудахтер\\Desktop\\Проверка.txt");

	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < 1; j++)
		{
			Y[i][1] = 0;
			for (int k = 0; k < m; k++)
			{
				Y[i][1] += A[i][k] * X[k];

			}
			h << "y[" << i + 1 << "]="<< Y[i][1] << "\t";
		}
		h << endl;
	}
	h.close();

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//удаляем массивы

	for (int i = 0; i < m; i++)
	{
		delete[] A[i];

	}
	delete[] A;
	delete[] X1;
	delete[] X;
	delete[] DiffX;
	delete[] Y;
	
	return 0;
}